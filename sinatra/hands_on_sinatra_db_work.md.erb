---
title: Hands-on with Sinatra Persistence
---
##### Database schema for an event schedule
<%= code_begin %>
Person(name, dob, gender, zipcode)
Event(name, date)
Registrations(person_id, event_id, status, comment)
<%= code_end %>
##### Required/desired Gems
~~~
$ gem install sinatra
~~~

##### Basic directory structure
~~~
demo_app/
  config/
    database.yml
    environments.rb
  db/
    migrate/
      .
    schema.rb
  models/
    .
  views/
    .
  Gemfile
  Rakefile
  config.ru
  demo_app.rb
~~~

##### Config.ru
~~~
# Config.ru configures the interface between "Rack" and Sinatra

require './demo_app'
run Sinatra::Application
~~~

##### config/environments.rb
~~~
require 'byebug'
puts "[Env: #{ENV['RACK_ENV']}.#{ENV['RAILS_ENV']}.#{ENV['SINATRA_ENV']}]"

configure :development do
  puts "[running in development mode]"
  ActiveRecord::Base.establish_connection(
    :adapter => 'sqlite3',
    :database =>  'development.sqlite3.db'
  )
end

configure :production do
  puts "[running in production mode]"
  ActiveRecord::Base.establish_connection(ENV['DATABASE_URL'])
end

configure :test do
  puts "[running in test mode]"
  ActiveRecord::Base.establish_connection(
    :adapter => 'sqlite3',
    :database =>  'test.sqlite3.db'
  )
end
~~~

##### Gemfile
~~~
source 'https://rubygems.org'

gem 'sinatra'
gem 'activerecord'
gem 'sinatra-activerecord'
gem 'byebug'

group :development, :test do
  gem 'rake'
  gem 'sqlite3'
  gem 'rack-test'
end

group :production do
  gem 'pg'
  gem 'puma'
end

~~~

##### Rakefile
~~~
require './demo_app.rb'
require 'sinatra/activerecord/rake'
require 'rake/testtask'

Rake::TestTask.new do |t|
  t.pattern = "test/*_test.rb"
end
~~~

##### demo_app.rb
~~~
require 'sinatra'
require 'sinatra/activerecord'
require './config/environments'
~~~

##### Migration files
~~~
# 001_create_persons.rb
class CreatePersons < ActiveRecord::Migration
  def change
    create_table :persons do |t|
      t.string :name
      t.date :dob
      t.string :gender
      t.integer :zipcode
    end
  end
end

# 002_create_events.rb
class CreateEvents < ActiveRecord::Migration
  def change
    create_table :events do |t|
      t.string :name
      t.date :date
    end
  end
end

# 003_create_registrations.rb
class CreateRegistrations < ActiveRecord::Migration
  def change
    create_table :registrations do |t|
      t.integer :person_id
      t.integer :event_id
      t.string :status
      t.string :comment
    end
  end
end
~~~

##### Models
~~~
# models/event.rb
class Event < ActiveRecord::Base
  has_many :registrations

  has_many :people, through: :registrations
end

# models/person.rb
class Person < ActiveRecord::Base
  has_many :registrations
  has_many :events, through: :registrations
end

# models/registration.rb
class Registration < ActiveRecord::Base
  belongs_to :person
  belongs_to :event
end

~~~

##### Tests

<%= code_begin %>
# test_helper.rb
require_relative '../demo_app'
require 'minitest/autorun'
require 'rack/test'

ActiveRecord::Migration.maintain_test_schema!

# event_test.rb
require_relative './test_helper.rb'

describe Event do
  it "can add events" do
    Event.create(name: "An Event")
    Event.create(name: "Another Event")
    Event.all.size.must_equal 2
  end
end
<%= code_end %>

### IRB code examples

<%= code_begin %>
$ irb
require './demo_app.rb'
ActiveRecord::Base.connection.tables
Person.all
Person.where(gender: 'm')
Person.where("dob > ?", Date.new(1995))
Person.where("dob > ?", Date.new(1995)).count
<%= code_end %>

##### CRUD operations (Create, Read, Update, Delete)

<%= code_begin %>
p = Person.new(name: "Pito", dob: '12-12-2012', gender: 'f', zipcode: 12355)
p.new_record?
p.save
p = Person.create(name: "Amin", dob: '12-12-2014', gender: 'm', zipcode: 31231)
p.delete
<%= code_end %>


##### Association, used

<%= code_begin %>
Person.find(1).registrations
Person.where(name: "Angelo Smith").first.registrations
Event.find(1).people
<%= code_end %>
###### Validations
*Validations are applied by ActiveRecord, NOT the database*
<%= code_begin %>
validates :zipcode, length: { is: 5}    # declared in model file
p = Person.find(1)
p.zipcode = 1                           # assign invalid value
p.valid?                                # explicit check
p.save                                  # Is not permitted into the database
p.save!                                 # Same but throws exception
<%= code_end %>

#### References

* [ActiveRecord Associations](http://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
* [ActiveRecord Queries](http://guides.rubyonrails.org/active_record_querying.html)
* [ActiveRecord Queries Cribsheet](http://cosi236b.courses.salas.com.s3-website-us-west-2.amazonaws.com/content/cribsheets/05_activerecord_queries/)
* [ActiveRecord Validations](http://edgeguides.rubyonrails.org/active_record_validations.html#validation-helpers)
* [Validations Cribsheet](http://cosi236b.courses.salas.com.s3-website-us-west-2.amazonaws.com/content/cribsheets/03_rails_validations/)
