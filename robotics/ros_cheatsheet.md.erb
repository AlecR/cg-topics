---
title: ROS Cheat Sheet
---
#### FAQ
* Install VMWare on your computer. You can get VMWare from Brandeis here: [Brandeis Software Portal](https://e5.onthehub.com/WebStore/ProductsByMajorVersionList.aspx?cmi_mnuMain_child=760fe823-f6c9-e111-971c-f04da23e67f6&cmi_mnuMain=0b2e917e-0b0c-e311-93f3-b8ca3a5db7a1&ws=253068f1-0c11-df11-85a5-0030487d8897&vsro=8)
* Use Ubuntu 16.04 **exactly**
* Follow the installation instructions for the [TurtleBot3](http://emanual.robotis.com/docs/en/platform/turtlebot3/pc_software_setup/#install-ubuntu-on-remote-pc-desktop-or-laptop-pc) **exactly**
* Each part of ROS is run in it's own terminal window as a CLI (command line interface) utility
* Your ROS programs will be written in Python.
* You must have `roscore` running before you try to run any ros-related program
* All your work happens inside the directory `catkin_ws` (catkin is the builder, and ws stands for workspace. Don't change those names.)
* Remember the **TAB** key which is greatly automated for ROS developers
* In order to execute a program/script on Linux, you must `chmod +x filename.py`
* Also include the 'shebang': #!/usr/bin/env python

#### Key command line utilities (CLI) for using ROS
* `roscore`: Start the ROS Core program
* `rostopic`: Work with topics
  * `rostopic list`: list all ros topics that roscore knows about
  * `rostopic echo`: print out any topics that are published
  * `rostopic info`: ask ros what it knows about a certain topic

#### Other ROS CLI utilities
* `rqt_graph` - display topics and subscriptions in a nice graphical format
* `roslaunch` - tool to launch collections of ROS nodes in one command. Requires a 'package launch file'
* `rosversion -d` - what ros version is installed?

#### Linux Commands
* `apt` family of commands, see: https://itsfoss.com/apt-command-guide/

#### Troubleshooting
If you get an error message that Ubuntu is running Lo-res mode or ubuntu just stalls during bootup, then:
* Ctrl-Alt F1  # get to terminal
* sudo apt-get update # update the apt-get app itself
* sudo apt-get upgrade # upgrade packages
* sudo apt-get install -f # apt-get fix its database
* restart

### Hints on how to get the STDR running:
1. Create a package (cd to catkin_ws/src)
```
catkin_create_pkg <package_name> [depend1] [depend2] [depend3]
E.g. catkin_create_pkg beginner_tutorials std_msgs rospy roscpp
```
1. Put the python in <pkg>/src or `gedit <fileName.py>`
1. Make it(python code) excecutable(cd to <pkg>/src)
```
chmod +x <fileName>.py
```
1. (cd to catkin_ws/)
```
catkin_make
```
1. (excecute code)
```
roscore
rosrun <package_name> <excecutable>
```

#### UI Instructions:
- Simple use case, server, GUIand a robot
```
$ roslaunch stdr_launchers server_with_map_and_gui_plus_robot.launch
```
- No map, no robot
```
$ roslaunch stdr_launchers server_no_map.launch
$ roslaunch stdr_gui stdr_gui.launch
```
 
#### Using Rviz to visualize robot, sensor measurements
```
$ roslaunch stdr_launchers rviz.launch
```
 
#### MAP
- Loading a map, using load_map tool
```
$ roscd stdr_resources
$ rosrun stdr_server load_map maps/sparse_obstacles.yaml
```
- Spawn a server with a map already loaded
```
<node type="stdr_server_node" pkg="stdr_server" name="stdr_server" args="$(find stdr_resources)/maps/sparse_obstacles.yaml"/>
$ roslaunch stdr_launchers server_with_map.launch
```
 
## Robot Manipulation
[http://wiki.ros.org/stdr_simulator/Tutorials/Robot%20manipulation](http://wiki.ros.org/stdr_simulator/Tutorials/Robot%20manipulation)
```
$ roslaunch turblebot_teleop_key.launch
```