---
title: Hands on Rails Test Demo
---
#### Set up
~~~
rails new wordgame
cd wordgame
~~~

#### Add and test a model
~~~
rails generate model word eng:string ned:string
rails db:migrate
~~~

##### Default empty test (word_test.rb)
~~~
class WordTest < ActiveSupport::TestCase
  test "the truth" do
    assert true
  end
end
~~~

##### See what rake tasks are present
~~~
rails -T
~~~

##### Add some more tests
~~~
test 'stores translation' do
  word = Word.new(eng: 'house', ned: 'huis')
  assert_equal 'house', word.eng
  assert_equal 'huis', word.ned
end
~~~

##### One way to add fixtures
~~~
def setup
  Word.destroy_all
  Word.create(eng: "house", ned: "huis")
  Word.create(eng: "boat", ned: "boot")
end
~~~

##### And see if words model can be persisted
~~~
test 'records stay around in database' do
  assert_equal 2, Word.count
end

test 'can add a record on the fly' do
  Word.create(eng: "shoe", ned: "schoen")
  assert_equal 3, Word.count
end
~~~

##### Want to make sure all words have translations
~~~
test 'cannot store word without both language versions' do
  myword = Word.create(eng: "university")
  assert_equal false, myword.valid?
end
~~~

##### Now make it work: Add a validation to the model
~~~
class Word < ActiveRecord::Base
  validates :eng, presence: true
  validates :ned, presence: true
end
~~~

##### Test the Word.random method
~~~
it "Can return a random word" do
  w = Word.random
  w.must_be_kind_of Word
end
~~~

#### Implement the Word.random method
~~~
def self.random
  offset = rand(Word.count)
  Word.offset(offset).first
end
~~~

#### Add some fixture data to create fake words in words.yml
~~~
# Read about fixtures at http://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html

<% 25.times do |n| %>
  word_<%= n %>:
    eng: <%= "english#{n}" %>
    ned: <%= "dutch#{n}" %>
<% end %>
~~~

#### Make appropriate modification to word_test to make it know about those words
1. Remove destroy_all from setup
1. Modify assert_equal to be 27 in one case and 28 in the other
1. Run rails test to check all green.

#### See if random word works if there are zero words in db
~~~
test "random word when there are no words in the database" do
  Word.destroy_all
  myword = Word.random
  assert_nil myword
end
~~~

#### Add and test a controller
~~~
rails generate controller Words learn
~~~
#### Look in the pre-generated test/controllers/word_controller.rb
* Basic test for a get is automatically provided
* Try running it for a quick happy hit

#### Add a fancier case in the same file

* first add to Gemfile: gem 'rails-controller-testing'
* Add this test
~~~
require_relative '../test_helper'

test "should pick up new word learn" do
  get words_learn_url
  assert_kind_of Word, assigns('word')
  assert_response :success
end
~~~

##### Now actually implement the action in the WordsController
~~~
class WordsController < ApplicationController
  def learn
    @word = Word.new
  end
end
~~~

##### Now, lets test that the controller is calling the Word.random method
~~~
it "passes a word from random" do
  target_word = Word.new(eng: "nose", ned: "neus")
  Word.stub :random, target_word do
    get :learn
    assigns('word').must_equal target_word
  end
end
~~~

* Stub creates a temporary override of the Word.random method
* And then verifies that it is being called,which it is now.
* We now need to update the controller to actually call Word.random
~~~

#### WordController calls Word.random
~~~
class WordsController < ApplicationController
  def learn
    @word = Word.random
  end
end
~~~

#### Add a view views/words/learn.html.erb
~~~
<h1>Words#learn</h1>

<h1>The Word of the day is: <%%= "English: #{@word.eng} Dutch: #{@word.ned}" %> </h1>
~~~

#### Add some seed data
~~~
Word.create(eng: "House", ned: "Huis")
Word.create(eng: "Boat", ned: "Boot")
Word.create(eng: "Shoe", ned: "Schoen")
~~~



#### References
* [Minitest Rails Gem](http://blowmage.com/minitest-rails/)
* [RoR Guide about testing](http://guides.rubyonrails.org/testing.html)
* [BDD with Minitest](https://semaphoreapp.com/blog/2014/10/27/bdd-on-rails-with-minitest-part-1-up-and-running.html)
* [Old Post on which my example above is based more or less](http://andrzejonsoftware.blogspot.com/2007/05/15-tdd-steps-to-create-rails.html)
* [Minitest Readme](https://github.com/seattlerb/minitest)
* [Minitest Quick Reference](http://www.mattsears.com/articles/2011/12/10/minitest-quick-reference)
