---
title: Software Engineering
---
#### What is Engineering?
* Is software engineering **ENGINEERING**?
* Is it different from "just programming?"
* Contrast: What is Computer **Science**? 
* What are some of the key characteristics that qualifies an activity as "engineering?"

#### Experimental Computer Science?
* We have many many beliefs (or debates) (in engineering and computer science) which are not based on evidence, for example: 
	* Are static or dynamic types more productive? 
	* Are 2 or 4 week sprints better? 
	* Is deeply commented code more maintainable? 
	* Are languages with 2 dimensional arrays better? 
	* Does multiple-inheritence reduce programmer productivity?
	* Is there a 100:1 productivity ratio between the best and worse programmers?

#### Quotes
* "Well, it may be all right in practice, but it will never work in theory." -- Warren Buffett on how the academic community regards his investment approach
* "In theory, there is no difference between theory and practice. But, in practice, there is." -- Jan L.A. van de Snepscheut and/or Yogi Berra
* "In theory, the difference between theory and practice is small. In practice, the difference between theory and practice is large."
* "Beware of bugs in the above code; I have only proved it correct, not tried it." -- Donald Knuth

##### One way to look at it from [1]
* Craft: applies traditioanl techniques to producce goods and provide services
* Science: Aims to gather, verify and document knowledge and insight through research
* Engineering: Applies both knowledge and scientifically analyzed and justified methods to develop and produce technical products

#### Things I look for in a "software engineer"
* Focus on design not just "coding" (but beware of BDOF)
* Focus on longevity, maintainability, reusability, sharing (repositories, version management)
* Focus on quality, fit and finish, and testing of all kinds at all levels
* Focus on cost, time, schedule, delivery

#### References
* [1] T. Demarco, “Software Engineering: An Idea whose time has come and gone?,” Computer (Long. Beach. Calif)., pp. 95–97.
* [2] M. Broy, “Can practitioners neglect theory and theoreticians neglect practice?,” Computer (Long. Beach. Calif)., vol. 44, no. October, pp. 19–24, 2011.
* [3] <%= link_to_topic :se_rules_of_thumb %>


