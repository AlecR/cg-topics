---
title: Software Engineering
---
#### Software Engineering and Comuter Science
<%= callout("Appology", " These are impossible questions to which there are numerous and contradictory responses. Different authorities support each to different degrees. All we can do here is bring some of the points to your attention. You will need to develop your own view.") %>
* Software Engineering
  * Is software engineering *engineering*?
  * Is it different from "just programming?"
  * What are some of the key characteristics that qualifies an activity as "engineering?"
* Computer Science
  * Is Computer Science *science*?
  * According to [Is Mathematics a Science?](http://www.arachnoid.com/is_math_a_science/) the essentials of science are:
    * Evidence gathered in experiments and observations.
    * Theories about the evidence, theories that move from the particular to the general.
    * The requirement that contradicting evidence falsify a theory.
  * Contrast: What is Computer Science?
* What is the relationship?
  * Is Software Engineering a sub domain of Computer Science, like AI and Cryptography
  * Or is it another 'dimension', AI/Cosi and AI/Engineering
  * Interesting to think about maybe, but I don't think it matters.

##### Quotes about the relationship
* "Well, it may be all right in practice, but it will never work in theory." -- Warren Buffett on how the academic community regards his investment approach
* "In theory, there is no difference between theory and practice. But, in practice, there is." -- Jan L.A. van de Snepscheut and/or Yogi Berra
* "In theory, the difference between theory and practice is small. In practice, the difference between theory and practice is large."
* "Beware of bugs in the above code; I have only proved it correct, not tried it." -- Donald Knuth

##### BTW: Experimental Computer Science?
* We have many many beliefs (or debates) (in engineering and computer science) which are not based on evidence, for example: 
	* Are static or dynamic types more productive? 
	* Are 2 or 4 week sprints better? 
	* Is deeply commented code more maintainable? 
	* Are languages with 2 dimensional arrays better? 
	* Does multiple-inheritence reduce programmer productivity?
	* Is there a 100:1 productivity ratio between the best and worse programmers?

#### My Conclusions

##### Three legs of the stool
* Craft or Art: applies traditional techniques to produce goods and provide services
* Science: Aims to gather, verify and document knowledge and insight through research
* Engineering: Applies both knowledge and scientifically analyzed and justified methods to develop and produce technical products

#### Things I look for in a "software engineer"
* Focus on design not just "coding" (but beware of BDOF)
* Focus on longevity, maintainability, reusability, sharing (repositories, version management)
* Focus on quality, fit and finish, and testing of all kinds at all levels
* Focus on cost, time, schedule, delivery
* See my own <%= link_to_topic :se_rules_of_thumb %>

#### References
* [1] [“Software Engineering: An Idea whose time has come and gone?](http://www.systemsguild.com/pdfs/tdmsoftwaresummer2009.pdf)
* [2] [“Can practitioners neglect theory and theoreticians neglect practice?"](http://disciplinas.stoa.usp.br/pluginfile.php/17266/mod_resource/content/1/ieee_computer_mbroy.pdf)
* [3] <%= link_to_topic :se_rules_of_thumb %>
* [4] [What is Computer Science?](http://www.cs.mtu.edu/~john/whatiscs.html)
* [5] [Is Computer Science Sience?](http://www.cs.mtu.edu/~john/jenning.pdf)
* [6] [Is Mathematics a Science?](http://www.arachnoid.com/is_math_a_science/) 

