---
title: REST and Web Services
---
### SOA and REST and Services

#### What is a web service?

* Consider this web page: [Olin College Engineering Courses](http://www.olin.edu/course-listing/)
* What would "TeachBack" do if it wanted to have a list of courses pre-populated with a college's courses?
  * Grab all the text `curl http://www.olin.edu/course-listing/ > olincourses.txt`
  * Write a program to parse that page and then load the results into a database.
  * This is called "scraping" and usually that would violate a copyright
  * Take a look at the scraping of Brandeis' course listing
* Server can also deliver information in "machine readable" formats (such as JSON or XML)
* The term "API" is used to describe the permissable ways that one program can call another, such as a library
* Web Service API is when this is between servers on the internet

##### Protocols
* This can be done with many different standards and formats and protocols
  * SOAP: [Simple Object Access Protocol](http://wikis.olin.edu/coursecatalog/doku.php?id=course_listings:engr)
  * XMLRPC: [XML-RPC](http://en.wikipedia.org/wiki/XML-RPC)
  * REST: [Representational State Transfer](http://en.wikipedia.org/wiki/Representational_state_transfer) -- our focus
* <%= discussion "What are some of the big differences between calling a gem's API and calling a web service API?. Performance? Error handling and recovery? Security? Cost sharing?" %>

##### Pause to look at the big picture
* Servers on the internet, anywhere, can be called as objects and methods
* Resources of all kinds can be offered to clients with no coordination
* The internet becomes a huge, amazing Operating System

#### One level deeper

##### RPC - Remote Procedure Calls
* Imagine a procedure (method): get_horoscope(date, sign) => String, so for example: `get_horoscope("march 22, 2015", "aries")` which returns a sentence of text (not html!)
  * I could use it to improve my calendar app to optionally display the user's horoscope
  * Or, I could use it to create a twitter "robot" to answer a tweet with my horosc
* What would it mean to call it between two computers?
* What would it mean to call it between two computers over the internet?
* How would you approach it?
* REST - A different way to think about RPC

##### New Development: Serverless Technologies
* Smaller units than services or microservices
* A single function. No classes. No state. Just a function
* FaaS (Function as a Service?)
* Servers are automatically deployed and undeployed by vendor
* Pay literally only when your code is running
* Offered by [Amazon Lambda](https://aws.amazon.com/lambda/). Also by Microsoft: [Azure Functions](https://azure.microsoft.com/en-us/services/functions/), [Google Cloud Functions](https://cloud.google.com/functions/docs/)
* Reference: [The Essential Guide to Serverless Technologies and Architectures](http://techbeacon.com/essential-guide-serverless-technologies-architectures#.V_u0JMbdj0M.twitter)

##### REST based on HTTP: Mini review
* HTTP Verbs: GET (HEAD), PUT, POST, DELETE.
* Think of everything in terms of a 'resource' that is being manipulated
* For example, GET means get a representation of the resource marked, e.g.
  * GET http://www.facebook.com/user/pitosalas
  * GET http://www.facebok.com/users
  * GET 0.0.0.0:3000/cards/1.xml
* Some things are harder to fit with the model
  * What might a horoscope service look like as REST?
  * The 'resource' here is a single fortune
  * http://myhoroscope.org/fortunes/1
  * http://myhoroscope.org/fortunes
  * http://myhoroscope.org/fortunes?date=mar-15-2025,sign=scorpio
  * http://myhoroscope.org/fortunes/random

* Note fortunes/random, random is not exactly identifying a resource; but close enough.
* Good URL design helps caching
  * some rhyme or reason on how to build urls and
  * make logical use of url space
  * Different 'representations' possible: html and xml, but others too, say csv or video
  * Big one: Standards allow caching in the cloud. But what about 'random' case? TTL!

#### Use Cases

##### Using a Web Service
* Motivations:
  * There's data (or UI) provided by another entity that you can use
  * It would augment and add a feature that you need
  * You can tolerate the dependencies
* Considerations
  * You will need to have an active internet connection
  * Does the server or the client call the web service?
  * Cost and/or rate restrictions
  * Identity (i.e. who's API key do you use?)

##### Providing a web service
* Motivations
  * Your product generates or incorporates data which would be useful to another party
  * Might be a revenue source
  * Might be a way to create dependence on your product or brand
  * Might be a way to be a 'good citizen'
* Considerations
  * Added complexity to your code
  * More to maintain and document and support
  * Places a load on your server
  * You probably have to imlement (and support) some kind of API key

#### In the Rails World
<%=nb "A REST API can be written in any language. The client can't tell!" %>

* [Using rails for API only applications](http://edgeguides.rubyonrails.org/api_app.html)
* What does this even mean?
* Rails Server only returns JSON (no html)
* Why is this interesting?
* Scalability, second app can share the database but run on another service
* URLs are totally different from URLs for UI

#### Advantages of using Rails
* Routing specified via resources
* URL generation and Controller dispatch
* Sophisticated Caching
* Generators
* Dev, Test, Production modes
* Sophisticated logging
* Built in security
