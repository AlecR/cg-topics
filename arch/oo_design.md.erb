---
title: Object Oriented Concepts
---
##### What is software design?
* In software, "arranging code in a particular way"
* YAGNI principle vs. BDOF
* Finding the balance: effort and care proportional to cost over time!

##### Patterns
* Patterns in software (inspired by:[A Pattern Language, by Christopher Alexander](http://www.amazon.com/gp/product/0195019199))
* Where do these ideas come from?

##### Classes
* Classes: How do you decide what a class is and what it is not?
* What is the domain or the problem space or the problem domain?
* Look for Nouns
* Use "CRC Cards"

#### Objects
* Classes and objects are different!
* Instance variables
* Constructor (no destructor in Ruby!)

##### Methods
* Methods: private/public
* Polymorphism
* "Duck" typing.
* How is duck typing is an alternative/complement to inheritence?
* And what about Java interfaces?
* Consider a method like #can_speak? in a gaming application

##### Inheritance
* inheritence: rarely is this the best solution
* composition and delegation: a better solution

