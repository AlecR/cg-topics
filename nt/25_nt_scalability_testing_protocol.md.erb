---
title: nanoTwitter Scalability Testing Protocol
---
#### Scalability Testing Protocol

Here's how testing of scaling will be done with loader.io. You need to make sure that your version of nanoTwitter performs as well as possible in these scenarios!

##### Setup

Before we can run a standardized test, we want to get each server to a known state we do the following commands directly from a browser.

* `/test/reset/all` - Delete everything and recreate testuser
* `/test/reset/standard?tweets=6000` - Load the test seed data
* `/test/status` - See that the state is what you expect
* `/test/users/create?count=u&tweets=10` - create "u" new users, 10 tweets each
* `/test/user/testuser/tweets?count=t` - have testuser tweet "t" times
* `/test/user/testuser/follow?count=f` - have f users follow testuser

##### Pattern

Ok, now the server is in a known state. Next we want to do three distinct load tests

1. `/` - user tries to simply load up the home page (non-logged in)
2. `/user/testuser` - specifically load "testusers" home page
3. `/user/testuser/tweet` (POST) - have testuser create one tweet

##### Test runs

* Test case 1: u = 100, t = 500, f = 30
* Test case 2: u = 500, t = 500, f = 100
* Test case 3: u = 1000, t = 1000, f = 300

##### Loader.io Setup for test
* Create a test case for each of the cases you want to test
  * Run 1 minute tests and play with the number of users to see what happens when you try to reach the limits indicated in the test runs
  * Use the "Maintain Client Load" test for pattern 1 and 2, and "Clients per test" for pattern 3
  * Enter each of the three urls above for three different test at least
  * Make sure you /test/reset between each test
* Collect data
