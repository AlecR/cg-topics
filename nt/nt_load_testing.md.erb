---
title: Load Testing nanoTwitter
---
#### Deployment
* To do load testing, your app needs to be running on a server
* This could be any server, even your neighbor's laptop.
* For our purposes, it needs to be on one of the cloud services
* We will use Heroku
* Cloud deployment implies that there is a well known 'fixed' domain name
  * (e.g. wild-mushroom-2312.herokuapp.com)

#### Repeatability
* "Scientific Method"
* Formulate hypotheses
* Run standardized experiments
* Collect data
* Validate or Invalidate the hypotheses

#### App functionality
* Each team has deployed nanoTwitter and has supplied us with the domain name
* Each implementation of nanoTwitter follows the same spec
* In particular, implement the url routes exactly as specified.
* This allows a unified test to be run against all of the apps
* Let's look at the <%= link_to_topic :nt_test_interface %>

#### Test Scripts
* These are the "standardized experiments"
* Let's take a look at the <%= link_to_topic :nt_scalability_testing_protocol %>

#### Load Testing Tools
* Purpose: Subject a server what looks like many many users
* Challenges: Requires a large network of computers sending "GET" requests
* Also needs a way to measure responsiveness
* There are numerous [open source Load Testing Tools](http://blazemeter.com/blog/open-source-load-testing-tools-which-one-should-you-use)
* We are using [loader.io](http://www.loader.io) -- at least to start.

#### Standard <%= link_to_topic :nt_seed_data %>
* To allow us to compare apples to apples we have <%= link_to_topic :nt_seed_data %>
* Adapt your code to use this <%= link_to_topic :nt_seed_data %>

#### Reporting
* Keep a careful lab notebook!
* Make note of configuration changes that you try
* Collect data and try to interpret it

#### When your app is failing to scale
* Think about what happens when your app response time is longer than
the time between new connections. Requests will start to pile up.
* If it takes too long for a request to reach the front of the line, it
will time out.
* If your app is too overloaded, it may shut down entirely. Make sure
to consult your Heroku logs after a test to identify this.
* When an app hasn't been accessed for a while, Heroku will put it in a
sleep state. If your app is asleep, make sure to access it manually
to wake it up before beginning a test. Waking up may take several
seconds, which would influence your results.

#### Using Loader.io
* Our goal is to see how well each of your servers survive the onslaught of traffic
* Take a look at [Loader.io](http://support.loader.io/article/16-test-types)
* Use the "maintain client load" option (at least to start.)

#### Test 1: Simple display of home page
* Visit your root page (which will display a set number of tweets)
* Use Loader.io to hit that page using maintain client load
* Collect and record data

#### Test 2: Display of a certain user's home page
* Visit /user/1 to display User 1's home page
* Visit /user/100 to display another home page
* Collect and record data

#### Test 3: Do some analysis
* Form some hypotheses about what is going on with your performance
* Make a report correlating load to performance
* Try `heroku pg:outliers` to see if it tells you anything about your db performance
