---
title: Mobile App Approaches
---
### Mobile GUI

#### Overview of approaches

* Conventional approach
  * Responsive HTML
  * Plus "turbolinks" and good caching
* Native platform
  * SWIFT on iOS (https://developer.apple.com/swift/)
  * Java on Android (http://developer.android.com/sdk/index.html)
* Unified frameworks:
    * [PhoneGap](http://phonegap.com)
* JavaScript Client Frameworks

#### TurboLinks
* Rails specific solution
* Fully revamped in Rails 5
* How it works

####  JavaScript Client Frameworks
* Lots of activity happening here
* Personally not (yet) a super fan
* Awesome results, but very high investment
* Shifting sands
* Web Components: Combining appearance and behavior. Still in flux, e.g. [Component Based Web UI] (http://derickbailey.com/2015/08/26/building-a-component-based-web-ui-with-modern-javascript-frameworks/)

#### Most important players (right now)
* AngularJS
* Ember
* Backbone
* React
* Trigger.io
* Meteor

#### How they work
* Create a stateful experience in the browser
* Use REST to get and store application state

#### Aurelia
* A pretty new Client GUI framework
* Recently heard about it during a [pretty compelling podcast](https://devchat.tv/js-jabber/203-jsj-aurelia-with-rob-eisenberg)
* No reason to think it will become "the one"
* But a good use case to experiment with
